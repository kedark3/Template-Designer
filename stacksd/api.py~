# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import json
import yaml
from openstack_dashboard.api import heat

from openstack_dashboard.dashboards.project.stacksd import mappings
from openstack_dashboard.dashboards.project.stacksd import sro
import tkMessageBox
import string
import random
import datetime
from collections import OrderedDict
import subprocess
import os

class Stack(object):
    def __init__(self, id, name, status, status_reason):
        self.stack_id = id
        self.stack_name = name
        self.stack_status = status
        self.stack_status_reason = status_reason

class Resource(object):
    def __init__(self, name, status, status_reason, type):
        self.resource_type = type
        self.resource_name = name
        self.resource_status = status
        self.resource_status_reason = status_reason



#Piece of code to to preserve order of dictionary in yaml.dump
class UnsortableList(list):
    def sort(self, *args, **kwargs):
        pass

class UnsortableOrderedDict(OrderedDict):
    def items(self, *args, **kwargs):
        return UnsortableList(OrderedDict.items(self, *args, **kwargs))



def represent_ordereddict(dumper, data):
    value = []

    for item_key, item_value in data.items():
        node_key = dumper.represent_data(item_key)
        node_value = dumper.represent_data(item_value)

        value.append((node_key, node_value))

    return yaml.nodes.MappingNode(u'tag:yaml.org,2002:map', value)




yaml.add_representer(OrderedDict, represent_ordereddict)
date=datetime.date(2013,05,23)
gen_template ={'heat_template_version':date,'description':'Simple template','resources':[]}
template_data={}

d3_data = {"nodes": [], "stack": {}}

resource_image_name = "asdkasd"

def d3_dataa(stack_id=''):
    
    #tkMessageBox.showinfo(title="Greetings", message="Hello World! from lb1\n" + str(len(d3_data['nodes'])))
    if stack_id == "e75ea590-dcc0-4989-8550-87d206b21970":
        while d3_data['nodes']:del d3_data['nodes'][:]
        template_data.clear()
    return json.dumps(d3_data)

def create_instance():
    
    #char = string.ascii_uppercase+string.digits
    #length1=random.randint(5,30)
    #a= 'instance' + str(len(d3_dataa[nodes]).join(map(lambda unused:random.choice(char),range(length1)))
    #tkMessageBox.showinfo(title="Greetings", message="Hello World!" + a)
    template_data = 'instance'   + str(len(d3_data['nodes']))
    

    resource = Resource(template_data, "Create Complete", "Create Complete", 'OS::Nova::Server')
    resource_image = mappings.get_resource_image(
                resource.resource_status,
                resource.resource_type)
    resource_status = mappings.get_resource_status(
                resource.resource_status)
    if resource_status in ('IN_PROGRESS', 'INIT'):
        in_progress = True
    else:
        in_progress = False
    resource_node = {
                'name': resource.resource_name,
                'status': resource_status,
                'image': resource_image,
                'required_by': [],
                'image_size': 50,
                'image_x': -25,
                'image_y': -25,
                'text_x': 35,
                'text_y': ".35em",
                'in_progress': in_progress,
                'info_box': sro.resource_info(resource)
            }
    d3_data['nodes'].append(resource_node)
    #return json.dumps(d3_data)

def create_lb():
    
    #char = string.ascii_uppercase+string.digits
    #length1=random.randint(5,30)
    #a= ''.join(map(lambda unused:random.choice(char),range(length1)))
    template_data = 'loadbalancer'   + str(len(d3_data['nodes']))
    resource = Resource(template_data, "Create Complete", "Create Complete", 'OS::Nova::LoadBalancer')
    resource_image = mappings.get_resource_image(
                resource.resource_status,
                resource.resource_type)
    resource_status = mappings.get_resource_status(
                resource.resource_status)
    if resource_status in ('IN_PROGRESS', 'INIT'):
        in_progress = True
    else:
        in_progress = False
    resource_node = {
                'name': resource.resource_name,
                'status': resource.resource_status,
                'image': resource_image,
                'required_by': [],
                'image_size': 50,
                'image_x': -25,
                'image_y': -25,
                'text_x': 35,
                'text_y': ".35em",
                'in_progress': in_progress,
                'info_box': sro.resource_info(resource)
            }
    d3_data['nodes'].append(resource_node)
'''
def create_db():
    
    #char = string.ascii_uppercase+string.digits
    #length1=random.randint(5,30)
    #a= ''.join(map(lambda unused:random.choice(char),range(length1)))
    template_data = 'database'   + str(len(d3_data['nodes']))

    resource = Resource(template_data, "Create Complete", "Create Complete", 'OS::Nova::Database')
    resource_image = mappings.get_resource_image(
                resource.resource_status,
                resource.resource_type)
    resource_status = mappings.get_resource_status(
                resource.resource_status)
    if resource_status in ('IN_PROGRESS', 'INIT'):
        in_progress = True
    else:
        in_progress = False
    resource_node = {
                'name': resource.resource_name,
                'status': resource.resource_status,
                'image': resource_image,
                'required_by': [],
                'image_size': 50,
                'image_x': -25,
                'image_y': -25,
                'text_x': 35,
                'text_y': ".35em",
                'in_progress': in_progress,
                'info_box': sro.resource_info(resource)
            }
    d3_data['nodes'].append(resource_node)
'''
def create_ins(dict):
    if 'loadbalancer' in resource_image_name:
        d3_data['nodes'][int(resource_image_name[-1])]['required_by'] = dict['members']
    
    template_data[resource_image_name[-1]] = dict

def get_lb_members():
    l = []
    for i in d3_data['nodes']:
        if 'instance' in i['name']:
            a = (i['name'],i['name'])
            l.append(a)
    #tkMessageBox.showinfo(title="Greetings", message="\n" + str(l))     
    return l        

def get_data(str, resources_name):
    global resource_image_name 
    resource_image_name = str
    if resources_name == "instance":
        dict = {'availability_zone': '',
                'instance_name': '',
                'key_name': '',
                'flavor': '',
		        'image':'',
                }
    else:
        l = get_lb_members()
        dict = {'lb_name': '',
                'pool_id': '',
                'protocol_port': '',
                'members':l,
                }           
    '''
    elif resources_name == "database":
        dict = {'database_name': '',
                'flavor': '',
               }
    '''            
    if resource_image_name[-1] in template_data.keys():
        return template_data[resource_image_name[-1]]        
    else:
        return dict
        
def del_node(s):
    #del d3_data['nodes'][:]
    for item in d3_data['nodes']:
        if s in item.values():
            d3_data['nodes'].pop()
    if s[-1] in template_data.keys():
        del template_data[s[-1]]

'''def create_template():
    #yaml.add_representer(UnsortableOrderedDict, yaml.representer.SafeRepresenter.represent_dict)
    fo=open("template1.yaml","w")
    a={"heat_template_version":date}
    yaml.safe_dump(a,fo,encoding=None,allow_unicode=True,default_flow_style=False)
    #yaml.safe_dump(gen_template,fo,encoding=None,allow_unicode=True,default_flow_style=False)
    #gen_template['resources']={}
    #tkMessageBox.showinfo(title="Greetings", message="\n" + str(new))
    for key in template_data:
        new=template_data[key]
        #tkMessageBox.showinfo(title="Greetings", message="\n" + str(new))
        if(new.get('instance_name')):
            res_name=new.get('instance_name')
            #tkMessageBox.showinfo(title="Greetings", message="\n" + str(res_name))
            n=new_dict(new,'instance_name')
            #tkMessageBox.showinfo(title="Greetings", message="\n" + str(n))
            for key,value in n.iteritems():
                if n[key]=="":
                    n=new_dict(n,key)
            x={'properites':n}
            #tkMessageBox.showinfo(title="Greetings", message="\n" + str(n))
            gen_template['resources'].append({res_name:{'type':'OS::Nova::Server','properties':n}})
            #yaml.safe_dump(gen_template,fo,encoding=None,allow_unicode=True,default_flow_style=False)
        else:
            res_name=new.get('lb_name')
            tkMessageBox.showinfo(title="Greetings", message="\n" + str(res_name))
            n=new_lb(new,'lb_name')
            gen_template['resources'].append({res_name:{'type':'OS::Nova::LoadBalancer','properties':n}})
    yaml.safe_dump(gen_template,fo,encoding=None,allow_unicode=True,default_flow_style=False,explicit_start=False)
    #tkMessageBox.showinfo(title="Greetings", message="\n" + str(count))
    elif (new.get('database_name')):
        res_name=new.get('database_name')
        n=new_dict(new,'database_name')
            gen_template['resources'].append({res_name:{'type':'OS::Nova::Database','properties':n}})
    fo.close()
    with open("template.yaml", "w") as fout:
        with open("template1.yaml", "r") as fin:
            for line in fin:
                    fout.write(line.replace('- ', '  '))
            #fout.write(line.replace('heat_template_version: 2013-05-23', 'heat_template_version: 2013-05-23'))
    #with open("template2.yaml", "w") as fout:
    #   with open("template.yaml", "r") as fin:
    #       for line in fin:
    #               fout.write(line.replace('heat_template_version: 2013 05 23', 'heat_template_version: 2013-05-23'))
    #temp=new_dict(gen_template,"")
    #tkMessageBox.showinfo(title="Greetings", message="\n" + str(gen_template))
    #return gen_template 
'''

def create_template(str):
    #yaml.add_representer(UnsortableOrderedDict, yaml.representer.SafeRepresenter.represent_dict)
    stri=str+".yaml"
    global gen_template
    gen_template1 ={'description':'Simple template','resources':[]}
    fo=open("template1.yaml","w")
    a={"heat_template_version":date}
    yaml.safe_dump(a,fo,encoding=None,allow_unicode=True,default_flow_style=False)
    #yaml.safe_dump(gen_template,fo,encoding=None,allow_unicode=True,default_flow_style=False)
    #gen_template['resources']={}
    #tkMessageBox.showinfo(title="Greetings", message="\n" + str(new))
    for key in template_data:
	new=template_data[key]
    	if(new.get('instance_name')):
    		res_name=new.get('instance_name')
		n=new_dict(new,'instance_name')
		#tkMessageBox.showinfo(title="Greetings", message="\n" + str(n))
		for key,value in n.iteritems():
			if n[key]=="":
				n=new_dict(n,key)
		x={'properites':n}
		#tkMessageBox.showinfo(title="Greetings", message="\n" + str(n))
    		gen_template1['resources'].append({res_name:{'type':'OS::Nova::Server','properties':n}})
		#yaml.safe_dump(gen_template,fo,encoding=None,allow_unicode=True,default_flow_style=False)
	elif (new.get('database_name')):
		res_name=new.get('database_name')
		n=new_dict(new,'database_name')
    		gen_template1['resources'].append({res_name:{'type':'OS::Nova::Database','properties':n}})
	else:
		res_name=new.get('lb_name')
		n=new_dict(new,'lb_name')
    		gen_template1['resources'].append({res_name:{'type':'OS::Nova::LoadBalancer','properties':new}})
    yaml.safe_dump(gen_template1,fo,encoding=None,allow_unicode=True,default_flow_style=False,explicit_start=False)
    #tkMessageBox.showinfo(title="Greetings", message="\n" + str(count))
    fo.close()
    
    
    with open(stri, "w") as fout:
    	with open("template1.yaml", "r") as fin:
        	for line in fin:
            		fout.write(line.replace('- ', '  '))
			#fout.write(line.replace('heat_template_version: 2013-05-23', 'heat_template_version: 2013-05-23'))
    #with open("template2.yaml", "w") as fout:
    #	with open("template.yaml", "r") as fin:
    #    	for line in fin:
    #        		fout.write(line.replace('heat_template_version: 2013 05 23', 'heat_template_version: 2013-05-23'))
    #temp=new_dict(gen_template,"")
    #tkMessageBox.showinfo(title="Greetings", message="\n" + str(gen_template))
    #gen_template['resources']=''
    gen_template=dict.copy(gen_template1)
    os.remove("template1.yaml")
    try:
    	subprocess.call('heat stack-create -f \'/home/sairam/horizon/' + stri+ '\' '+ str,shell=True)
    except subprocess.CalledProcessError as e:
    	subprocess.call('heat stack-update -f \'/home/sairam/horizon/' + stri+ '\' '+ str,shell=True)
    #gen_template1 = copy.deepcopy(gen_template)
    #return gen_template 



     
def new_dict(old_dict,strings):
    n = old_dict.copy()
    n.pop(strings,None)
    return n

def new_lb(old_dict,strings):
    count=0
    n = old_dict.copy()
    n.pop(strings,None)
    for i in n['members']:
        n['members'].remove(i)
        count=count+1
    for i in range(1,count):
        for key in template_data:
            new=template_data[key]
            #tkMessageBox.showinfo(title="Greetings", message="\n" + str(new))
            if(new.get('instance_name')):
                res_name=new.get('instance_name')
                tkMessageBox.showinfo(title="Greetings", message="\n" + str(res_name))
                n['members'].append(res_name)
    #n.pop('members',None)
    #tkMessageBox.showinfo(title="Greetings", message="\n" + str(count))
    return n

def ret_template():
    #stream = open('template.yaml', 'r')
    #gene=yaml.load(stream)
    #tkMessageBox.showinfo(title="Greetings", message="Hello\n")
    #stream.close();	
    return gen_template
